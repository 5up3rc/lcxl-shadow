#ifndef _DRIVER_INTERFACE_H_
#define _DRIVER_INTERFACE_H_
//禁用4201警告：使用了非标准扩展 : 无名称的结构/联合
#pragma warning(disable:4201)
//获取磁盘列表
#define IOCTL_GET_DISK_LIST CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)
//获取驱动设置
#define IOCTL_GET_DRIVER_SETTING CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_BUFFERED, FILE_ANY_ACCESS)
//设置下次启动的影子模式
#define IOCTL_SET_NEXT_REBOOT_SHADOW_MODE CTL_CODE(FILE_DEVICE_UNKNOWN, 0x802, METHOD_BUFFERED, FILE_ANY_ACCESS)
//获取自定义保护磁盘列表
#define IOCTL_GET_CUSTOM_DISK_LIST CTL_CODE(FILE_DEVICE_UNKNOWN, 0x803, METHOD_BUFFERED, FILE_ANY_ACCESS)
//设置自定义保护磁盘列表
#define IOCTL_SET_CUSTOM_DISK_LIST CTL_CODE(FILE_DEVICE_UNKNOWN, 0x804, METHOD_BUFFERED, FILE_ANY_ACCESS)
//获取/设置应用程序请求
#define IOCTL_APP_RQUESET CTL_CODE(FILE_DEVICE_UNKNOWN, 0x805, METHOD_BUFFERED, FILE_ANY_ACCESS)
//启动影子模式
#define IOCTL_START_SHADOW_MODE CTL_CODE(FILE_DEVICE_UNKNOWN, 0x806, METHOD_BUFFERED, FILE_ANY_ACCESS)
//设置是否保存数据
#define IOCTL_SET_SAVE_DATA_WHEN_SHUTDOWN CTL_CODE(FILE_DEVICE_UNKNOWN, 0x807, METHOD_BUFFERED, FILE_ANY_ACCESS)
//设置是否处于影子模式
#define IOCTL_IN_SHADOW_MODE CTL_CODE(FILE_DEVICE_UNKNOWN, 0x808, METHOD_BUFFERED, FILE_ANY_ACCESS)
//获取随机ID号，此处为获取AES的key
#define IOCTL_GET_RANDOM_ID CTL_CODE(FILE_DEVICE_UNKNOWN, 0x809, METHOD_BUFFERED, FILE_ANY_ACCESS)
//验证，如果用IOCTL_GET_RANDOM_ID解密出来的是硬件序列号，则正确
#define IOCTL_VALIDATE_CODE CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80A, METHOD_BUFFERED, FILE_ANY_ACCESS)
//验证密码
#define IOCTL_VERIFY_PASSWORD CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80B, METHOD_BUFFERED, FILE_ANY_ACCESS)
//设置密码
#define IOCTL_SET_PASSWORD CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80C, METHOD_BUFFERED, FILE_ANY_ACCESS)
//定义驱动错误类型
#define DRIVER_ERROR_SUCCESS 0x00000000//成功
#define DRIVER_ERROR_SETTING_FILE_NOT_FOUND 0x00000001//驱动配置文件不存在
//
//  Buffer size for local names on the stack
//
#define MAX_DEVNAME_LENGTH      64

//磁盘保护模式
//PM_NONE:不保护
//SM_ALL:保护全部磁盘
//SM_SYSTEM:只保护系统盘
//PM_PROTECT_CUSTOM：自定义
typedef enum _LCXL_SHADOW_MODE {SM_NONE, SM_ALL, SM_SYSTEM, SM_CUSTOM} LCXL_SHADOW_MODE, *PLCXL_SHADOW_MODE;
//应用程序请求类型
//AR_VOLUME_INFO:卷信息
typedef enum _APP_REQUEST_TYPE {AR_VOLUME_INFO} APP_REQUEST_TYPE, *PAPP_REQUEST_TYPE;

#include <pshpack1.h>

typedef struct _VOLUME_DISK_INFO {
	//盘符名
	WCHAR DosName[MAX_DEVNAME_LENGTH];
	//是否被保护
	BOOLEAN IsProtect;
	//是否在关机的时候保存数据
	BOOLEAN IsSaveShadowData;
	//磁盘卷名称
	WCHAR VolumeDiskName[MAX_DEVNAME_LENGTH];
} VOLUME_DISK_INFO, *PVOLUME_DISK_INFO;

typedef struct _APP_DRIVER_SETTING {
	ULONG DriverErrorType;//驱动在运行过程中是否有错误
	LCXL_SHADOW_MODE CurShadowMode;//当前磁盘保护模式
	LCXL_SHADOW_MODE NextShadowMode;//磁盘保护模式
} APP_DRIVER_SETTING, *PAPP_DRIVER_SETTING;

typedef struct _APP_REQUEST_VOLUME_INFO {
	ULONG BytesPerSector;//每个扇区包含的字节数
	ULONG SectorsPerAllocationUnit;//分配单元中包含的扇区数
	ULONG BytesPerAllocationUnit;//分配单元中包含的字节数，为BytesPerSector*SectorsPerAllocationUnit
	ULONGLONG TotalAllocationUnits;//总共有多少分配单元
	ULONGLONG AvailableAllocationUnits;//还有多少可用的单元，
} APP_REQUEST_VOLUME_INFO, *PAPP_REQUEST_VOLUME_INFO;

//应用程序请求
typedef struct _APP_REQUEST {
	//盘符名
	IN WCHAR VolumeName[MAX_DEVNAME_LENGTH];
	//请求类型
	IN APP_REQUEST_TYPE RequestType;
	//请求具体内存
	union {
		OUT APP_REQUEST_VOLUME_INFO VolumeInfo;//AR_VOLUME_INFO
	};
} APP_REQUEST, *PAPP_REQUEST;

//是否在关机的时候保存影子数据
typedef struct _SAVE_DATA_WHEN_SHUTDOWN {
	//盘符名
	WCHAR VolumeName[MAX_DEVNAME_LENGTH];
	//是否保存数据
	BOOLEAN IsSaveData;
} SAVE_DATA_WHEN_SHUTDOWN, *PSAVE_DATA_WHEN_SHUTDOWN;
#include <poppack.h>

#endif